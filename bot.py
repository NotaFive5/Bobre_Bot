

import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import Router
import logging
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# URL –∏–≥—Ä—ã –Ω–∞ GitHub Pages
GAME_URL = "https://notafive5.github.io/BoberCurwa/"
API_URL = "https://your-server-domain.com/api"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å: [–ò–≥—Ä–∞—Ç—å –≤ FLAPPY BOBR]({GAME_URL})',
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /score –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—á–∫–æ–≤
@dp.message_handler(commands=['score'])
async def send_score(message: Message):
    user_id = message.from_user.id
    try:
        response = requests.get(f'{API_URL}/user_score?user_id={user_id}')
        if response.status_code == 200:
            score = response.json().get('score', 0)
            await message.answer(f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤!')
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        logging.error(e)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç–∞.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /top –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
@dp.message_handler(commands=['top'])
async def send_leaderboard(message: Message):
    try:
        response = requests.get(f'{API_URL}/leaderboard')
        if response.status_code == 200:
            leaderboard = response.json().get('leaderboard', [])
            leaderboard_text = 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n'
            for idx, entry in enumerate(leaderboard, start=1):
                leaderboard_text += f'{idx}. {entry["username"]}: {entry["score"]} –æ—á–∫–æ–≤\n'
            await message.answer(leaderboard_text)
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        logging.error(e)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
