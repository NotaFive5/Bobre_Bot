import os
import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import requests

logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not API_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_TOKEN")

# URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Railway
API_URL = "https://servercurwa-production.up.railway.app"
GAME_URL = "https://notafive5.github.io/BoberCurwa/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å: [–ò–≥—Ä–∞—Ç—å –≤ FLAPPY BOBR]({GAME_URL})',
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /score - –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("score"))
async def send_score(message: Message):
    user_id = message.from_user.id
    try:
        response = requests.get(f'{API_URL}/api/user_score', params={'user_id': user_id})
        if response.status_code == 200:
            score = response.json().get('score', 0)
            await message.answer(f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤!')
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: {e}")
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç–∞.')

# –ö–æ–º–∞–Ω–¥–∞ /top - –≤—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
@dp.message(Command("top"))
async def send_leaderboard(message: Message):
    try:
        response = requests.get(f'{API_URL}/api/leaderboard')
        if response.status_code == 200:
            leaderboard = response.json().get('leaderboard', [])
            if leaderboard:
                leaderboard_text = 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n'
                for idx, entry in enumerate(leaderboard, start=1):
                    leaderboard_text += f'{idx}. {entry["username"]}: {entry["score"]} –æ—á–∫–æ–≤\n'
                await message.answer(leaderboard_text)
            else:
                await message.answer('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.')
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
